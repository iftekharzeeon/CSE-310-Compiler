.MODEL SMALL
.STACK 100H

.DATA
	CR EQU 0DH
	LF EQU 0AH
	VAR_TO_PRINT DW ?
	COUNT DW ?

	i_1 DW ?
	j_2 DW ?
	k_3 DW ?

.CODE
MAIN PROC
	;DATA INIT
	MOV AX, @DATA
	MOV DS, AX


	PUSH 1

	POP CX
	MOV i_1, CX

	MOV CX, i_1
	MOV VAR_TO_PRINT, CX
	CALL NEW_LINE
	CALL PRINT_VAR
	CALL NEW_LINE

	PUSH 5

	PUSH 8

	POP BX
	POP AX
	ADD AX, BX
	PUSH AX

	POP CX
	MOV j_2, CX

	MOV CX, j_2
	MOV VAR_TO_PRINT, CX
	CALL NEW_LINE
	CALL PRINT_VAR
	CALL NEW_LINE

	PUSH 2

	POP BX
	POP AX
	ADD AX, BX
	PUSH AX

	POP CX
	MOV k_3, CX

	MOV CX, k_3
	MOV VAR_TO_PRINT, CX
	CALL NEW_LINE
	CALL PRINT_VAR
	CALL NEW_LINE

	PUSH 0

	;EXIT PROGRAM
	MOV AH, 4CH
	INT 21H

	MAIN ENDP

PRINT_VAR PROC

	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV COUNT, 0

	MOV AX, VAR_TO_PRINT
	CMP AX, 0
	JL NEGATIVE_PRINT

START_DIVISION:
	MOV DX, 0
	MOV CX, 10
	DIV CX
	PUSH DX
	ADD COUNT, 1
	CMP AX, 0
	JE POP_STACK
	JMP START_DIVISION

NEGATIVE_PRINT:
	MOV CX, AX

	;PRINT MINUS SIGN
	MOV DL, '-'
	MOV AH, 2
	INT 21H

	MOV AX, CX
	NEG AX
	JMP START_DIVISION

POP_STACK:
	POP DX
	ADD DL, '0'
	MOV AH, 2
	INT 21H

	SUB COUNT, 1
	MOV CX, COUNT
	CMP CX, 0
	JNE POP_STACK

	POP DX
	POP CX
	POP BX
	POP AX

	RET

	PRINT_VAR ENDP


NEW_LINE PROC

	MOV AH, 2
	MOV DL, CR
	INT 21H
	MOV AH, 2
	MOV DL, LF
	INT 21H

	RET

	NEW_LINE ENDP


END MAIN
