Line 1: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

i

Line 3: declaration_list : declaration_list COMMA ID

i,j

Line 3: declaration_list : declaration_list COMMA ID

i,j,k

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k,ll;

Line 3: statement : var_declaration

int i,j,k,ll;

Line 3: statements : statement

int i,j,k,ll;

Line 19: variable : ID

k

Line 19: factor : CONST_INT

4

Line 19: unary_expression : factor

4

Line 19: term : unary_expression

4

Line 19: simple_expression : term

4

Line 19: rel_expression : simple_expression

4

Line 19: logic_expression : rel_expression

4

Line 19: expression : variable ASSIGNOP logic_expression

k=4

Line 19: expression_statement : expression SEMICOLON

k=4;

Line 19: statement : expression_statement

k=4;

Line 19: statements : statements statement

int i,j,k,ll;
k=4;

Line 20: variable : ID

ll

Line 20: factor : CONST_INT

6

Line 20: unary_expression : factor

6

Line 20: term : unary_expression

6

Line 20: simple_expression : term

6

Line 20: rel_expression : simple_expression

6

Line 20: logic_expression : rel_expression

6

Line 20: expression : variable ASSIGNOP logic_expression

ll=6

Line 20: expression_statement : expression SEMICOLON

ll=6;

Line 20: statement : expression_statement

ll=6;

Line 20: statements : statements statement

int i,j,k,ll;
k=4;
ll=6;

Line 22: variable : ID

k

Line 22: factor : variable DECOP

k--

Line 22: unary_expression : factor

k--

Line 22: term : unary_expression

k--

Line 22: simple_expression : term

k--

Line 22: rel_expression : simple_expression

k--

Line 22: logic_expression : rel_expression

k--

Line 22: expression : logic_expression

k--

Line 23: variable : ID

ll

Line 23: variable : ID

ll

Line 23: factor : variable

ll

Line 23: unary_expression : factor

ll

Line 23: term : unary_expression

ll

Line 23: simple_expression : term

ll

Line 23: factor : CONST_INT

3

Line 23: unary_expression : factor

3

Line 23: term : unary_expression

3

Line 23: simple_expression : simple_expression ADDOP term

ll+3

Line 23: rel_expression : simple_expression

ll+3

Line 23: logic_expression : rel_expression

ll+3

Line 23: expression : variable ASSIGNOP logic_expression

ll=ll+3

Line 23: expression_statement : expression SEMICOLON

ll=ll+3;

Line 23: statement : expression_statement

ll=ll+3;

Line 23: statements : statement

ll=ll+3;

Line 24: compound_statement : LCURL statements RCURL

{
ll=ll+3;
}


ScopeTable# 1.1.1

ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> <ll : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 24: statement : compound_statement

{
ll=ll+3;
}


Line 24: statement : WHILE LPAREN expression RPAREN statement

while (k--){
ll=ll+3;
}


Line 24: statements : statements statement

int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}


Line 26: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(ll);

Line 26: statements : statements statement

int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);

Line 27: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

Line 27: statements : statements statement

int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);

Line 30: factor : CONST_INT

0

Line 30: unary_expression : factor

0

Line 30: term : unary_expression

0

Line 30: simple_expression : term

0

Line 30: rel_expression : simple_expression

0

Line 30: logic_expression : rel_expression

0

Line 30: expression : logic_expression

0

Line 30: statement : RETURN expression SEMICOLON

return 0;

Line 30: statements : statements statement

int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);
return 0;

Line 31: compound_statement : LCURL statements RCURL

{
int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);
return 0;
}


ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> <ll : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 31: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);
return 0;
}


Line 31: unit : func_definition

int main(){
int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);
return 0;
}



Line 31: program : unit

int main(){
int i,j,k,ll;
k=4;
ll=6;
while (k--){
ll=ll+3;
}

printf(ll);
printf(k);
return 0;
}



Line 32: start : program


ScopeTable# 1
6 --> <main : ID> 

Total lines: 32
Total errors: 0
