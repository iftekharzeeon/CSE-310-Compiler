Line 1: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

i

Line 3: declaration_list : declaration_list COMMA ID

i,j

Line 3: declaration_list : declaration_list COMMA ID

i,j,k

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k;

Line 3: statement : var_declaration

int i,j,k;

Line 3: statements : statement

int i,j,k;

Line 5: variable : ID

i

Line 5: factor : CONST_INT

3

Line 5: unary_expression : factor

3

Line 5: term : unary_expression

3

Line 5: simple_expression : term

3

Line 5: rel_expression : simple_expression

3

Line 5: logic_expression : rel_expression

3

Line 5: expression : variable ASSIGNOP logic_expression

i=3

Line 5: expression_statement : expression SEMICOLON

i=3;

Line 5: statement : expression_statement

i=3;

Line 5: statements : statements statement

int i,j,k;
i=3;

Line 6: variable : ID

j

Line 6: factor : CONST_INT

8

Line 6: unary_expression : factor

8

Line 6: term : unary_expression

8

Line 6: simple_expression : term

8

Line 6: rel_expression : simple_expression

8

Line 6: logic_expression : rel_expression

8

Line 6: expression : variable ASSIGNOP logic_expression

j=8

Line 6: expression_statement : expression SEMICOLON

j=8;

Line 6: statement : expression_statement

j=8;

Line 6: statements : statements statement

int i,j,k;
i=3;
j=8;

Line 7: variable : ID

k

Line 7: factor : CONST_INT

6

Line 7: unary_expression : factor

6

Line 7: term : unary_expression

6

Line 7: simple_expression : term

6

Line 7: rel_expression : simple_expression

6

Line 7: logic_expression : rel_expression

6

Line 7: expression : variable ASSIGNOP logic_expression

k=6

Line 7: expression_statement : expression SEMICOLON

k=6;

Line 7: statement : expression_statement

k=6;

Line 7: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;

Line 10: variable : ID

i

Line 10: factor : variable

i

Line 10: unary_expression : factor

i

Line 10: term : unary_expression

i

Line 10: simple_expression : term

i

Line 10: factor : CONST_INT

3

Line 10: unary_expression : factor

3

Line 10: term : unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression RELOP simple_expression

i==3

Line 10: logic_expression : rel_expression

i==3

Line 10: expression : logic_expression

i==3

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(j);

Line 11: statements : statement

printf(j);

Line 12: compound_statement : LCURL statements RCURL

{
printf(j);
}


ScopeTable# 1.1.1

ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 12: statement : compound_statement

{
printf(j);
}


Line 14: statement : IF LPAREN expression RPAREN statement

if (i==3){
printf(j);
}


Line 14: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}


Line 14: variable : ID

j

Line 14: factor : variable

j

Line 14: unary_expression : factor

j

Line 14: term : unary_expression

j

Line 14: simple_expression : term

j

Line 14: factor : CONST_INT

8

Line 14: unary_expression : factor

8

Line 14: term : unary_expression

8

Line 14: simple_expression : term

8

Line 14: rel_expression : simple_expression RELOP simple_expression

j<8

Line 14: logic_expression : rel_expression

j<8

Line 14: expression : logic_expression

j<8

Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(i);

Line 15: statements : statement

printf(i);

Line 16: compound_statement : LCURL statements RCURL

{
printf(i);
}


ScopeTable# 1.1.2

ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 16: statement : compound_statement

{
printf(i);
}


Line 18: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

Line 18: statements : statement

printf(k);

Line 19: compound_statement : LCURL statements RCURL

{
printf(k);
}


ScopeTable# 1.1.3

ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 19: statement : compound_statement

{
printf(k);
}


Line 19: statement : IF LPAREN expression RPAREN statement ELSE statement

if (j<8){
printf(i);
}
else
{
printf(k);
}


Line 19: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}


Line 36: factor : CONST_INT

0

Line 36: unary_expression : factor

0

Line 36: term : unary_expression

0

Line 36: simple_expression : term

0

Line 36: rel_expression : simple_expression

0

Line 36: logic_expression : rel_expression

0

Line 36: expression : logic_expression

0

Line 36: statement : RETURN expression SEMICOLON

return 0;

Line 36: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}

return 0;

Line 37: compound_statement : LCURL statements RCURL

{
int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}

return 0;
}


ScopeTable# 1.1
0 --> <i : ID> 
1 --> <j : ID> 
2 --> <k : ID> 

ScopeTable# 1
6 --> <main : ID> 

Line 37: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}

return 0;
}


Line 37: unit : func_definition

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}

return 0;
}



Line 37: program : unit

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if (i==3){
printf(j);
}

if (j<8){
printf(i);
}
else
{
printf(k);
}

return 0;
}



Line 39: start : program


ScopeTable# 1
6 --> <main : ID> 

Total lines: 39
Total errors: 0
